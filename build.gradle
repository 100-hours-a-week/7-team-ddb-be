plugins {
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'java'
	id 'jacoco'
}

group = 'com.dolpin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17

repositories {
	mavenCentral()
}

// QueryDSL Q클래스 생성 경로 설정
def querydslGeneratedDir = file("src/main/generated")

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// QueryDSL 의존성 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	// WebClient + Reactor Netty 의존성
	implementation 'org.springframework:spring-webflux'
	implementation 'io.projectreactor.netty:reactor-netty-http'

	// GCS
	implementation 'com.google.cloud:google-cloud-storage:2.50.0'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	// Database
	implementation 'org.postgresql:postgresql'
	implementation 'org.hibernate.orm:hibernate-spatial:6.6.11.Final'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// 환경변수
	implementation 'me.paulschwarz:spring-dotenv:3.0.0'

	// Actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// 테스트 의존성
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// Testcontainers
	testImplementation 'org.testcontainers:junit-jupiter:1.20.0'
	testImplementation 'org.testcontainers:postgresql:1.20.0'

	// PostgreSQL 드라이버
	testImplementation 'org.postgresql:postgresql:42.5.4'

	// AssertJ
	testImplementation 'org.assertj:assertj-core:3.24.2'

	// Mockito
	testImplementation 'org.mockito:mockito-core:5.1.1'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.1.1'

	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework:spring-aspects'

	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.redisson:redisson-spring-boot-starter:3.24.3'
	implementation 'org.apache.commons:commons-pool2'

	// JSON 직렬화
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	// 캐시 추상화
	implementation 'org.springframework.boot:spring-boot-starter-cache'


	implementation platform("software.amazon.awssdk:bom:2.25.15")
	implementation 'software.amazon.awssdk:s3'

}

// QueryDSL 설정
sourceSets {
	main {
		java {
			srcDir querydslGeneratedDir
		}
	}
}

tasks.withType(Test) {
	useJUnitPlatform()

	// 테스트 시스템 프로퍼티 설정
	systemProperty 'spring.profiles.active', 'test'

	// 테스트 메모리 설정
	minHeapSize = "512m"
	maxHeapSize = "2g"

	// 테스트 병렬 실행 설정 (선택사항)
	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

	// 테스트 결과 출력 설정
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
		exceptionFormat "full"
		showCauses true
		showExceptions true
		showStackTraces true
	}
}

// QueryDSL 설정
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = querydslGeneratedDir
}

// Q클래스 자동 삭제 설정
clean {
	doLast {
		delete querydslGeneratedDir
	}
}

jacoco {
	toolVersion = "0.8.8"
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					// 기본 제외 항목
					'**/config/**',
					'**/dto/**',
					'**/*Application.class',

					// SecurityConfig 구체적 제외
					'**/SecurityConfig.class',
					'**/security/SecurityConfig.class',
					'**/config/SecurityConfig.class',
					'**/global/security/SecurityConfig.class',

					// QueryDSL 자동 생성 Q클래스 제외
					'**/Q*.class',

					// Lombok 자동 생성 코드 제외
					'**/*$Builder.class',

					// 캐시 관련 제외
					'**/cache/**',
					'**/service/cache/**',

					// Storage 관련 제외
					'**/storage/service/gcs/**',
					'**/storage/service/s3/**',
					'**/storage/controller/**',

					// Rate Limit 제외
					'**/ratelimit/**',

					// Redis 서비스 제외
					'**/redis/service/**',

					// 기타 설정 클래스들
					'**/WebConfig.class',
					'**/RedisConfig.class',
					'**/DatabaseConfig.class',
					'**/CorsConfig.class',
					'**/AsyncConfig.class',
					'**/QuerydslConfig.class',
					'**/GcsConfig.class',
					'**/S3Config.class',
					'**/SchedulingConfig.class'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}
		}
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					// 기본 제외 항목
					'**/config/**',
					'**/dto/**',
					'**/*Application.class',

					// SecurityConfig 구체적 제외
					'**/SecurityConfig.class',
					'**/security/SecurityConfig.class',
					'**/config/SecurityConfig.class',
					'**/global/security/SecurityConfig.class',

					// Storage 관련 제외
					'**/storage/service/gcs/**',
					'**/storage/controller/**',

					// Rate Limit 제외
					'**/ratelimit/**',

					// Redis 서비스 제외
					'**/redis/service/**',
			])
		}))
	}
}
